* About

The Toothpick Engine is a game engine based on the geometry of 2D lines
intersecting.

** History

The original concept and earliest version of this game date back to the year
2007 or maybe 2008.

At some quite early stage of learning Java programming, I was experimenting with
animating graphics, but was having trouble getting the double-buffering to
work - so I had this idea to try and come up with a game where the screen is
never cleared.

This new version is a complete rewrite. Most of the concepts and game mechanics
were present since fairly early days but the architecture is completely
different (and hopefully improved), especially in relation to separation of the
UI and logic.

* Building

#+BEGIN_SRC
gradlew all
#+END_SRC

NOTE: build.gradle contain a task 'copyToLib', which copys the final jar file to
~/lib. This is a convenience for me when I am developing programs which depend
on this library - if you don't want this to happen then use:

#+BEGIN_SRC
gradlew jar
#+END_SRC

* Dependencies

- Java 8
- JUnit

* Simple Examples

Hello, World - opens a do-nothing window:

#+BEGIN_SRC java :classname ToothpickEngineExample.java
import info.bschambers.toothpick.*;
import info.bschambers.toothpick.ui.swing.SwingUI;

public class ToothpickEngineExample {

    public static void main(String[] args) {
        TPSwingUI ui = new TPSwingUI("Hello, World!");
        TPBase base = new TPBase();
        base.setUI(ui);
        ui.setVisible(true);
        base.run();
    }
}
#+END_SRC

With minimal setup we can make a simple toothpick game with a player and
automatically replenishing supply of drones:

#+BEGIN_SRC java
// add these imports
import info.bschambers.toothpick.*;
import info.bschambers.toothpick.actor.TPFactory;
import info.bschambers.toothpick.geom.Pt;
import info.bschambers.toothpick.ui.swing.SwingUI;

public class ToothpickEngineExample {

    public static void main(String[] args) {
        TPSwingUI ui = new TPSwingUI("Hello, World!");
        TPBase base = new TPBase();
        base.setUI(ui);

        // create program
        TPProgram prog = new TPProgram();
        prog.addBehaviour(new PBMaintainDronesNum());
        prog.addBehaviour(new PBToothpickPhysics());
        prog.setPlayer(TPFactory.playerLine(new Pt(200, 200)));
        prog.init();
        prog.setResetSnapshot();

        // run
        base.setProgram(prog);
        ui.setVisible(true);
        base.run();
    }
}
#+END_SRC

To add a menu system (the menu will appear when you press ESC):

#+BEGIN_SRC java
// insert this before calling base.run()
TPMenu menu = new TPMenu("Main Menu");
base.setMenu(menu);
#+END_SRC

* Toothpick Engine Architecture (read the javadoc for more detailed information)
** Overview

At the root is a TPBase instance which has reference to one of each:
- TPPlatform
- TPUI
- TPMenu
- TPSound

TPBase provides main program-loop (inside the run method). The basic anatomy of
the program-loop looks like this:
- tell TPPlatform to update the current program, or don't if program is paused
- trigger sound effects if required by current program
- tell UI to update and repaint
- regulate timing

** Behaviours-Driven Architecture

A common theme in these classes is the use of 'behaviours'. TPProgram, TPActor
etc maintain a list of behaviours. These are objects which are updated on every
move and may do almost anything.

There are some behaviours of which multiples should not be allowed to exist in a
certain context. These are identified by having a 'singleton-group' ID. When a
behaviour object is added, if it has a sigleton ID, then any other behaviour
with the same singleton ID is automatically removed. For example
ProgramBehaviour has the singleton group "physics-model".

** TPPlatform

TPPlatform handles running TPProgram instances. TPSequencePlatform runs a
sequence of programs one after the other and manages the transitions between
them.

** TPProgram

TPProgram defines all game logic.

The TPProgram update function:
- tell each TPActor to update
- do collision detection
- do garbage collection/housekeeping

** TPActor
TPActor:
- TPForm
- children (sub-actors)
- behaviours

- ColorGetter
- TPLine

** TPPlayer
TPPlayer wraps a TPActor and a KeyInputHandler.

Also remembers the starting state of the actor, to handle resetting or reviving the player-actor.

TPPlayer gets key input like this:
- TPSwingUI implements KeyListener
- TPSwingUI passes key-pressed and key-released events to player via getProgram().getPlayer()

KeyInputHandler extends ActorBehaviour

TODO: improve key handling architecture
... use something like this...
... TPUI.registerKeyListener(KeyListener)
... can have multiple key listeners/players etc

** TPUI

The UI interface is designed to be a plugin architecture.

TPUI is a very simple interface which defines the user interface (SwingUI is a
fully functional implementation using the java swing library).

*** Implementing updateUI()

The following things need to be done in order to achieve full implementation:
- paint actors (with TPGeometry transformation)
- paint bounds (with TPGeometry transformation)
- paint menus
- paint line intersection points
- handle smear-mode

** TPMenu

** TPSound

Plugin architecture:

#+BEGIN_SRC java :classname TPSound.java
public interface TPSound {
    void explosion();
}
#+END_SRC

** Load & Save

TPProgram state is loaded and saved using TPXml.

In order to be loaded and saved properly, classes must implement
TPEncodingHelper - this is used to specify which parameters need to be saved and
how to re-set them after re-instantiation.

#+BEGIN_SRC java :classname TPEncodingHelper.java
public interface TPEncodingHelper {
    TPEncoding getEncoding();
}
#+END_SRC

TPEncodingHelper is designed as an intermediate layer between the classes and
the encoding implementation. Encoding is currently done using XML and TPXml, but
other systems could easily be implemeneted.

Encoding requirements:
- classes must have a no-args constructor

...

Certain objects are handled automatically by TPXml... presumably another
encoding system would have to also implement these in order to maintains
compatibility?

** Game Installation

*** Sound Module Plugins

Put sound modules in the sound dir - the program will detect them at startup and
you can switch between them via the settings menu.

*** UI As Plugin

The UI is also designed to be easily pluggable, however it must be specified in
the config file and cannot be switched on-the-fly.

* Default Controls
** Menu Navigation

- ~ESC~        - activate/deactivate menu
- ~h~          - hide/show menu without deactivating it
- ~ENTER~      - run menu item or enter sub-menu
- ~BACKSPACE~  - up to parent-menu
- ~UP/DOWN~    - select previous/next menu item
- ~LEFT/RIGHT~ - decrement/increment incrementable item or toggle boolean

** Player 1

- ~w~ - left
- ~e~ - right
- ~q~ - up
- ~a~ - down
- ~z~ - action
- ~1~ - zoom in
- ~2~ - zoom out

** Player 2

- ~[~ - left
- ~]~ - right
- ~p~ - up
- ~;~ - down
- ~/~ - action

* License

Copyright 2019-present B. S. Chambers.

Distributed under GPL, version 3.
